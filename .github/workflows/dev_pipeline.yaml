name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

env:
  GO_VERSION: 1.23
  TF_VERSION: 1.9.8
  TF_WORKING_DIR: "./terraform"
  BUCKET_NAME: ${{ vars.BUCKET_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0

      - name: Run Lint
        run: golangci-lint run ./... -E errcheck

      - name: Run gosec
        uses: securego/gosec@master
        with:
          args: ./...

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #     - name: Run tests
  #       run: go test -v ./...

  build:
    # needs: [lint, test]
    needs: [lint]
    runs-on: ubuntu-latest
    outputs:
      CONTAINER_IMAGE: ${{ steps.meta.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create ECR repository if not exists
        run: |
          set +e
          REPO_EXISTS=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} 2>&1)
          if [[ $REPO_EXISTS == *"RepositoryNotFoundException"* ]]; then
            echo "Repositório ${{ env.ECR_REPOSITORY }} não encontrado. Criando..."
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}
          else
            echo "Repositório ${{ env.ECR_REPOSITORY }} já existe."
          fi
          set -e
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            GITHUB_SHA=${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
      - name: Terraform Plan
        run: terraform plan -var container_image=${{ env.CONTAINER_IMAGE }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
      - name: Terraform Apply
        run: terraform apply --auto-approve -var container_image=${{ env.CONTAINER_IMAGE }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
      - name: Verify Deployment
        run: |
          # TODO: Add code to verify the deployment, e.g., check the status of the ECS service
          echo "Deployment verification successful"
