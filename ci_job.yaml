name: CI Pipeline
# on:
#   pull_request:
#     branches:
#       - main
#   push:
#     branches: [main]

on:
  push:
    branches:
      - dev

jobs:
  ci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

      - name: Run Lint
        run: golangci-lint run

      # - name: Run Tests
      #   run: go test -v

      - name: Run gosec
        uses: securego/gosec@master
        with:
          args: ./...

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=cslemes_points-to-go
            -Dsonar.organization=cslemes
            -Dsonar.sources=.

      - name: Check Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: "Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  ci-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Dependencies
        run: |
          go mod download
          go mod verify

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          set +e
          REPO_EXISTS=$(aws ecr describe-repositories --repository-names ${{ env.REPOSITORY_NAME }} 2>&1)
          if [[ $REPO_EXISTS == *"RepositoryNotFoundException"* ]]; then
            echo "Repositório ${{ env.REPOSITORY_NAME }} não encontrado. Criando..."
            aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
          else
            echo "Repositório ${{ env.REPOSITORY_NAME }} já existe."
          fi
          set -e
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          REPO_PATH: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}

        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}            
            type=raw,value=${{ github.event.repository.name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

          platforms: linux/amd64
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            GITHUB_SHA=${{ github.sha }}
  cd-terraform:
    env:
      TF_VERSION: "1.9.8"
      TF_WORKING_DIR: "./terraform"
      BUCKET_NAME: ${{ vars.BUCKET_NAME }}
      REPOSITORY_NAME: ${{ github.event.repository.name }}
      CONTAINER_IMAGE: ${{ vars.AWS_ACCOUNT }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.REPOSITORY_NAME }}:${{ GITHUB_SHA::8}

    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Terraform Plan
        run: terraform plan -var container_image=${{ env.CONTAINER_IMAGE }}
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform Apply
        run: terraform apply --auto-approve -var container_image=${{ env.CONTAINER_IMAGE }}
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
